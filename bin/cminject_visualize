#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of CMInject
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this program for scientific work, you should correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

import argparse

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm

from cminject.result_storages.hdf5 import HDF5ResultStorage
from cminject.utils.visualization import plot_trajectories, plot_trajectories_colored, plot_detectors, \
    plot_trajectories_movie

program_description = """Visualizes a simulation result HDF5 file."""

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='cminject_visualization', description=program_description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('file', help='The result (HDF5) file to visualize.', type=str, metavar='filename')
    parser.add_argument(
        '-n', type=int, help='Only plot n randomly sampled trajectories. Useful for quick qualitative analysis of'
                             ' large files. Applies to -T and -M; does not affect -H.')

    parser.add_argument('-T', help='Plot trajectories.', action='store_true')
    parser.add_argument(
        '-Tc', action='store_true', help='Plot colored trajectories, as line segments encoding particle velocity. '
                                         'Shows more information, but is more computationally expensive to render.')

    parser.add_argument(
        '-H', nargs='*', help='Plot histograms (1D/2D) of named quantities at each detector. 2D histograms will be '
                              'plotted when a pair of quantity names is given separated by a comma, e.g. "x,y", '
                              'otherwise a 1D histogram will be plotted.')
    parser.add_argument(
        '-Hb', type=int, help='The number of bins to use for the histograms. If this option is not given, the number '
                              'will be automatically determined based on the data.')

    parser.add_argument(
        '-M', action='store_true', help='Plot a trajectory movie, i.e., a live animation of the trajectories.')
    parser.add_argument(
        '-Md', type=float, help='The delay (in ms) between movie frames. 10 by default.', default=10)
    parser.add_argument(
        '-Mm', type=int, help='The number of previous positions to plot to draw each curve. 10 by default.', default=10)
    parser.add_argument(
        '-Mdims', type=str, default="x,y",
        help='The pair or triple of dimensions to plot in the trajectory movie, separated by a comma (no spaces!). '
             '"x,y" by default.')

    args = parser.parse_args()

    with HDF5ResultStorage(args.file) as f:
        # Plot detector histograms
        if args.H:
            detectors = list(f.get_detectors().values())
            plot_detectors_kwargs = {'cmin': 1, 'norm': LogNorm()}
            if args.Hb is not None:
                plot_detectors_kwargs.update(bins=args.Hb)
            for desc in args.H:
                plot_detectors(detectors, desc, **plot_detectors_kwargs)

        if args.T or args.M:
            trajectories = f.get_trajectories()
            if args.n:
                trajectories = np.random.choice(trajectories, args.n, replace=False)

        # Plot trajectories
        if args.T:
            draw_fn = plot_trajectories_colored if args.Tc else plot_trajectories
            draw_fn(trajectories)

        # Show a trajectory movie
        if args.M:
            ani, _ = plot_trajectories_movie(trajectories, n_previous=args.Mm, delay=args.Md,
                                             dimension_description=args.Mdims)
            # FIXME not sure why this call seems to be necessary unless blit=True, and also must live here and not...
            # FIXME ...inside the plotting function??
            ani.event_source.start()

    plt.show()


### Local Variables:
### fill-column: 100
### truncate-lines: t
### End:
