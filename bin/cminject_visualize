#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of CMInject
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this program for scientific work, you should correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

import argparse

import numpy as np
import matplotlib.pyplot as plt

from cminject.result_storages.hdf5 import HDF5ResultStorage
from cminject.utils.visualization import plot_trajectories, plot_trajectories_colored, plot_detectors

program_description = """Visualizes a simulation result HDF5 file."""

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='cminject_visualization', description=program_description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('file', help='The result (HDF5) file to visualize.', type=str, metavar='filename')

    parser.add_argument('-T', help='Plot trajectories.', action='store_true')
    parser.add_argument('-Tn', help='Only plot n randomly sampled trajectories. '
                                    'Useful for quick qualitative analysis of large files.', type=int, metavar='n')
    parser.add_argument('-Tc',
                        help='Plot colored trajectories, as line segments encoding particle velocity. '
                             'Shows more information, but is more computationally expensive to render.',
                        action='store_true')
    parser.add_argument('-H', help='Plot histograms (1D/2D) of named quantities at each detector. 2D histograms '
                                   'will be plotted when a pair of quantity names is given separated by a comma,'
                                   ' e.g. "x,y", otherwise a 1D histogram will be plotted.', nargs='*')
    args = parser.parse_args()

    with HDF5ResultStorage(args.file) as f:
        # Plot detector histograms
        if args.H:
            detectors = list(f.get_detectors().values())
            for desc in args.H:
                plot_detectors(detectors, desc)

        # Plot trajectories
        if args.T:
            fig = plt.figure()
            ax = fig.gca()
            # Get trajectories, potentially taking a sample
            trajectories = f.get_trajectories()
            if args.Tn:
                trajectories = np.random.choice(trajectories, args.Tn, replace=False)
            # Plot trajectories
            if args.Tc:
                plot_trajectories_colored(trajectories, ax=ax)
            else:
                plot_trajectories(trajectories, ax=ax, color='k')
            fig.show()

    plt.show()


### Local Variables:
### fill-column: 100
### truncate-lines: t
### End:
