#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of CMInject.
# It is a reference implementation of a subset of possible experimental setups, together with command line argument
# parsing. Its purpose is to allow those simulations to be run without additional code needing to be written, and to
# showcase how the setup is created so people can extend it or write more complex setups.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this program for scientific work, you should correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

import argparse
from gettext import gettext as _
import logging
import os
import importlib
from typing import Type

from cminject.definitions.property_updaters import TrajectoryPropertyUpdater
from cminject.definitions.result_storage import HDF5ResultStorage
from cminject.setups.base import Setup
from cminject.utils.args import natural_number


def get_setup_class(setup_class_path: str) -> Type[Setup]:
    """
    Uses importlib to get a Setup class by its "path" as a string. This path is the same thing as you'd put in an
    import statement to import the Setup class, and can be anywhere importlib can find it
    (essentially, somewhere on the PYTHONPATH).

    :param setup_class_path: The import path to the Setup subclass.
    :return: A Setup subclass.
    :raises: ValueError, if the class could not be imported or if it not a Setup subclass.
    """
    if '.' not in setup_class_path:
        raise ValueError(f"Invalid import path for setup class: {setup_class_path}")
    setup_modulename, setup_classname = setup_class_path.rsplit('.', 1)
    setup_module = importlib.import_module(setup_modulename)
    setup_cls = getattr(setup_module, setup_classname, None)
    if setup_cls is None:
        raise ValueError(f"Could not import class {setup_classname} from module {setup_modulename}!")
    if not issubclass(setup_cls, Setup):
        raise ValueError(f"Imported setup class {setup_classname} is not a subclass of Setup!")

    return setup_cls


def get_setup_help_action(setup_class_path) -> Type[argparse._HelpAction]:
    """
    Constructs an action to print the help for a specific Setup class along with the help of the main program.

    :param setup_class_path: The path to the Setup subclass.
    :return: A subclass of argparse._HelpAction, constructed at call of this method.
    """
    class HelpWithSetupHelpAction(argparse._HelpAction):
        def __call__(self, parser, namespace, values, option_string=None):
            setup_parser = None
            try:
                setup_parser = get_setup_class(setup_class_path).get_parser()
            except ValueError:
                pass

            parser.print_help()

            print("\n\n" + "-" * 21 + ' Help for the setup specific parser: ' + '-' * 22 + '\n')
            if setup_parser is not None:
                setup_parser.print_help()
            else:
                print(f"ERROR: Could not find setup class {namespace.setup}!")

            parser.exit()
    return HelpWithSetupHelpAction


def main():
    """
    The main method of cminject. Further documentation is given by the help strings of the argparse parser.
    """
    DEFAULT_SETUP = 'cminject.setups.OneFlowFieldSetup'
    # This base_parser is a small workaround for wanting to print out the help of the given --setup parameter.
    # If we define an action directly on `parser` that prints the help, it won't have parsed the other arguments
    # at all, so the setup help will always be printed for the same default setup, which of course isn't intended.
    # Instead, we parse the same argument with the same definition twice. Might be improvable, but it works fine.
    base_parser = argparse.ArgumentParser(add_help=False)
    base_parser.add_argument('-s', '--setup',
                             help='A python import path to a Setup subclass that defines the experiment.',
                             type=str, default=DEFAULT_SETUP)
    # ignore all other args, also don't separate them (ignore 2nd return value)
    base_args, __ = base_parser.parse_known_args()

    # This constructs the actual parser for the main program.
    parser = argparse.ArgumentParser(prog='cminject',
                                     formatter_class=argparse.MetavarTypeHelpFormatter,
                                     add_help=False)
    parser.add_argument('-s', '--setup', help='A python import path to a Setup subclass that defines the experiment.',
                        type=str)
    parser.add_argument('-h', '--help', action=get_setup_help_action(base_args.setup), default=argparse.SUPPRESS,
                        help=_('show this help message and exit'))
    parser.add_argument('-n', '--nof-particles', help='The number of particles to simulate',
                        type=natural_number, required=True)
    parser.add_argument('-t', '--time-interval',
                        help='The time interval to run the simulation within, as a 3-list (t_start, t_end, dt)',
                        type=float, nargs=3)
    parser.add_argument('-o', '--output-file', help='Output filename for phase space (hdf5 format)',
                        type=str, required=True)
    parser.add_argument('-T', '--store-trajectories', help='Store trajectories?', action='store_true')
    parser.add_argument('--seed', help='Seed for the random generator', type=int)
    parser.add_argument('--single-threaded',
                        help='Run single threaded? CAUTION: Very slow, only for debugging purposes',
                        action='store_true')
    parser.add_argument('--chunksize', help='Chunksize for parallel processing. 1 by default.', type=int)
    parser.add_argument('--processes',
                        help='# of processes to use for parallel processing. Equal to # of CPU cores by default.',
                        type=int)
    parser.add_argument('--loglevel', choices={'debug', 'info', 'warning', 'error', 'critical'}, type=str)

    parser.set_defaults(
        setup=DEFAULT_SETUP,
        time_interval=[0.0, 1.8, 1e-6],
        chunksize=1,  # same as None according to multiprocessing docs
        loglevel='warning',
        processes=os.cpu_count()
    )
    # Parse the known args and leave the rest for the setup class parser
    args, unknown_args = parser.parse_known_args()

    # Set up logging
    logging.basicConfig(format='%(levelname)s:[%(filename)s/%(funcName)s] %(message)s',
                        level=getattr(logging, args.loglevel.upper()))

    # Try retrieving the setup class via importlib, then use it to parse the args the setup needs, and do (optional)
    # validation on them.
    setup_cls = get_setup_class(args.setup)
    setup_parser = setup_cls.get_parser()
    setup_args = setup_parser.parse_args(unknown_args)
    setup_cls.validate_args(setup_args)

    # If that was successful, let's set up the experiment and run it
    logging.info("Setting up experiment...")
    experiment = setup_cls.construct_experiment(args, setup_args)

    # Let's use HDF5ResultStorage if there was no ResultStorage set by the setup's construct_experiment method
    if not experiment.result_storage:
        experiment.result_storage = HDF5ResultStorage(args.output_file, mode='w')

    # This is a bit of a special case that should be allowed to be enabled/disabled independent of the setup,
    # and it makes sense to always have this property updater run _after_ all others, so it's handled separately
    if args.store_trajectories:
        experiment.property_updaters += [TrajectoryPropertyUpdater()]

    # Log some basic info and start running.
    t_start, t_end, dt = experiment.time_interval
    logging.info(f"Simulating in {experiment.number_of_dimensions}D space, "
                 f"from t0={t_start} to {t_end} with dt={dt}.")
    logging.info(f"The total Z boundary of the experiment is {experiment.z_boundary}.")
    logging.info("Running experiment...")
    experiment.run(
        single_threaded=args.single_threaded,
        chunksize=args.chunksize,
        processes=args.processes,
        loglevel=args.loglevel
    )
    logging.info("Done running experiment. Storing results...")


if __name__ == '__main__':
    main()


### Local Variables:
### fill-column: 100
### truncate-lines: t
### End:
