#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of CMInject
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this program for scientific work, you should correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

import argparse
import logging

import matplotlib.pyplot as plt
import numpy as np

from cminject.definitions.result_storages.hdf5 import HDF5ResultStorage
from cminject.utils.result_analysis.distribution_analysis import get_x_percent_position
from cminject.utils.result_analysis.hessian_files import HessianFile

program_description = """
TODO
"""


def main():
    logging.basicConfig(format='%(levelname)s:[%(filename)s/%(funcName)s] %(message)s',
                        level=logging.INFO)

    parser = argparse.ArgumentParser(prog='cminject_analyze-beam', description=program_description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-s', '--simulation-file', type=str,
                        help='Filename of a CMInject simulation result file', nargs='*')
    parser.add_argument('-e', '--experiment-file', type=str, nargs=2, action='append', metavar=(
        'file', 'zorigin'))
    parser.add_argument('-p', '--percentage', type=float, default=70,
                        help='Percentage of particles to use, starting from the beam center, '
                             'for the determination of the beam width. 70[%%] by default.')

    args = parser.parse_args()

    # ---

    fig = plt.figure()
    ax = fig.gca()
    for simfile in (args.simulation_file or []):
        storage = HDF5ResultStorage(simfile, 'r')
        storage.plot_focus_curve(ax=ax, percentage=args.percentage, label=simfile)
    for (expfile, zorigin) in (args.experiment_file or []):
        zorigin = float(zorigin)
        hf = HessianFile(expfile, zorigin=zorigin)
        hf.plot_focus_curve(ax=ax, percentage=args.percentage, label=expfile)
    ax.set_ylim(bottom=0)
    fig.legend()
    plt.show()


if __name__ == '__main__':
    main()

### Local Variables:
### fill-column: 100
### truncate-lines: t
### End:
