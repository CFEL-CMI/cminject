#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of CMInject
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this program for scientific work, you should correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

import argparse
import logging

from cminject.utils.structured_txt_hdf5 import txt_to_hdf5

program_description = """
Converts an input txt file describing a field represented as a grid of values
to an HDF5 file that CMInject can interpret and simulate particles with.
"""


def main():
    parser = argparse.ArgumentParser(prog='convert_txt_to_hdf5', description=program_description,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-i', help='Input file (COMSOL .txt format)', type=str, required=True, metavar='infile')
    parser.add_argument('-o', help='Output file (.hdf5)', type=str, required=True, metavar='outfile')
    parser.add_argument('-d', help='Number of spatial dimensions', type=int, required=True, metavar='#dims')
    parser.add_argument(
        '-m', '--mirror',
        help='Useful for mirror symmetry and symmetry around an axis: Mirrors the entire field around the axis '
             'in the first dimension that is located at the minimal position in that first dimension. WARNING: '
             'ONLY pass this if your field is symmetric around this axis but this is NOT yet reflected in the data.',
        action='store_true'
    )
    parser.add_argument(
        '-a', '--attr',
        help='Stores an arbitrary attribute on the root node of the output HDF5 file.',
        action='append',
        nargs=2,
        metavar=('key', 'value'),
        type=str
    )  # TODO type shouldn't be str for the values, it should be 'guessing' and trying in order: int -> float -> str

    parser.add_argument('-fG', '--flow-gas', choices=['N', 'He'],
                        help='Shortcut for -fv, and -fm for common gas types. Warns if values are unknown '
                             'for the given temperature and gas type.',
                        type=str)
    parser.add_argument('-ft', '--flow-temperature', help='Temperature of the gas in the flow field.',
                        type=float)
    parser.add_argument('-fv', '--flow-dynamic-viscosity', help='Dynamic viscosity of the flow field.',
                        type=float)
    parser.add_argument('-fm', '--flow-gas-mass', help='Mass of the gas particles in the flow field.',
                        type=float)

    args = parser.parse_args()
    attrs = dict(args.attr or [])
    # Attach args that are shorthands for attributes to args.attr, if they are present in args
    # TODO this violates DRY, we should instead extract and transform the names from the parser args somehow
    for k in {'flow_gas', 'flow_temperature', 'flow_dynamic_viscosity',
              'flow_density', 'flow_gas_mass'} & args.__dict__.keys():
        value = getattr(args, k)
        if value is not None:
            attrs[k] = value

    txt_to_hdf5(infile_name=args.i, outfile_name=args.o, dimensions=args.d, mirror=args.mirror, attributes=attrs)
    logging.info("Done.")


if __name__ == '__main__':
    main()

### Local Variables:
### fill-column: 100
### truncate-lines: t
### End: